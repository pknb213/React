{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Cheon\\\\Desktop\\\\Project\\\\React\\\\indycare\\\\src\\\\components\\\\Public\\\\BarGraph.js\";\nimport React from 'react';\nimport Chart from 'chart.js';\nlet myBarChart; // Chart.default.global.defaultFontFamily = \"'PT Sans', sans-serif\";\n// Chart.default.global.legend.display = false;\n\nexport default class BarGraph extends React.PureComponent {\n  constructor(...args) {\n    super(...args);\n    this.chartRef = React.createRef();\n\n    this.buildChart = () => {\n      let myChartRef = this.chartRef.current.getContext(\"2d\");\n      myChartRef.canvas.width = '490px';\n      myChartRef.canvas.height = '300px';\n      let gradientStroke = myChartRef.createLinearGradient(0, 0, 0, 400);\n      gradientStroke.addColorStop(0, \"#439CFA\");\n      gradientStroke.addColorStop(1, \"#439CFA\");\n      let gradientFill = myChartRef.createLinearGradient(0, 0, 0, 400);\n      gradientFill.addColorStop(0, \"rgba(173,215,255,1)\");\n      gradientFill.addColorStop(1, \"rgba(173,215,255,0.4\");\n      const data = this.props.data;\n      if (typeof myBarChart !== \"undefined\") myBarChart.destroy();\n      myBarChart = new Chart(myChartRef, {\n        type: 'bar',\n        data: {\n          // Bring in data\n          //labels: ['a', 'b', 'c', 'd', 'e', 'f'],\n          // labels: labels\n          datasets: [{\n            label: \"Count\",\n            //data: [16, 46, 23, 72, 55, 78],\n            data: data,\n            fill: true,\n            borderColor: gradientStroke,\n            pointBorderColor: gradientStroke,\n            pointBackgroundColor: gradientStroke,\n            pointBorderWidth: 2,\n            pointHoverRadius: 2,\n            pointRadius: 2,\n            backgroundColor: gradientFill,\n            //hoverBackgroundColor:\n            hoverBorderColor: \"#FACD83\",\n            borderWidth: 2.5\n          }]\n        },\n        options: {\n          //Customize chart options\n          legend: {\n            position: \"bottom\"\n          },\n          tooltips: {\n            mode: 'index',\n            intersect: false\n          },\n          hover: {\n            mode: 'nearest',\n            intersect: false,\n            animationDuration: 0\n          },\n          scales: {\n            xAxes: [{\n              //barThickness: 30,\n              type: 'time',\n              time: {\n                padding: 15,\n                fontStyle: \"bold\",\n                parser: 'YY-MM-DD HH:mm:ss',\n                unit: 'hour',\n                unitStepSize: 1,\n                displayFormat: {\n                  hour: 'MM-DD HH:mm'\n                }\n              },\n              ticks: {\n                autoSkip: true,\n                source: 'auto'\n              }\n            }],\n            // yAxes: [{\n            //     scaleLabel: {\n            //         //display: true,\n            //         //labelString: 'Work Count'\n            //     },\n            //     ticks: {\n            //         fontColor: \"rgba(0,0,0,0.8)\",\n            //         fontStyle: \"bold\",\n            //         maxTicksLimit: 5,\n            //         padding: 15,\n            //         beginAtZero: true,\n            //         stepValue: 5,\n            //         steps: 10\n            //     }\n            // }],\n            tooltips: {\n              intersect: false,\n              mode: 'index',\n              callbacks: {\n                label: function (tooltipItem, myData) {\n                  var label = myData.datasets[tooltipItem.datasetIndex].label || '';\n\n                  if (label) {\n                    label += ': ';\n                  }\n\n                  label += parseFloat(tooltipItem.value).toFixed(2);\n                  return label;\n                }\n              }\n            }\n          }\n        }\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.buildChart();\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    this.buildChart();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"chart_section\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, \"WorK Count [CNT]\"), React.createElement(\"div\", {\n      className: \"chart_cnt\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(\"canvas\", {\n      id: \"myCountChart\",\n      ref: this.chartRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Cheon/Desktop/Project/React/indycare/src/components/Public/BarGraph.js"],"names":["React","Chart","myBarChart","BarGraph","PureComponent","chartRef","createRef","buildChart","myChartRef","current","getContext","canvas","width","height","gradientStroke","createLinearGradient","addColorStop","gradientFill","data","props","destroy","type","datasets","label","fill","borderColor","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointRadius","backgroundColor","hoverBorderColor","borderWidth","options","legend","position","tooltips","mode","intersect","hover","animationDuration","scales","xAxes","time","padding","fontStyle","parser","unit","unitStepSize","displayFormat","hour","ticks","autoSkip","source","callbacks","tooltipItem","myData","datasetIndex","parseFloat","value","toFixed","componentDidMount","componentDidUpdate","prevProps","prevState","snapshot","render"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Chart from 'chart.js';\r\n\r\nlet myBarChart;\r\n\r\n// Chart.default.global.defaultFontFamily = \"'PT Sans', sans-serif\";\r\n// Chart.default.global.legend.display = false;\r\n\r\nexport default class BarGraph extends React.PureComponent {\r\n    chartRef = React.createRef();\r\n\r\n    componentDidMount() {\r\n        this.buildChart();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        this.buildChart();\r\n    }\r\n\r\n    buildChart = () => {\r\n        let myChartRef = this.chartRef.current.getContext(\"2d\");\r\n        myChartRef.canvas.width = '490px';\r\n        myChartRef.canvas.height = '300px';\r\n        let gradientStroke = myChartRef.createLinearGradient(0, 0, 0, 400);\r\n        gradientStroke.addColorStop(0, \"#439CFA\");\r\n        gradientStroke.addColorStop(1, \"#439CFA\");\r\n        let gradientFill = myChartRef.createLinearGradient(0, 0, 0, 400);\r\n        gradientFill.addColorStop(0, \"rgba(173,215,255,1)\");\r\n        gradientFill.addColorStop(1, \"rgba(173,215,255,0.4\");\r\n\r\n        const {data} = this.props;\r\n\r\n        if (typeof myBarChart !== \"undefined\") myBarChart.destroy();\r\n\r\n        myBarChart = new Chart(myChartRef, {\r\n            type: 'bar',\r\n            data: {\r\n                // Bring in data\r\n                //labels: ['a', 'b', 'c', 'd', 'e', 'f'],\r\n                // labels: labels\r\n                datasets: [\r\n                    {\r\n                        label: \"Count\",\r\n                        //data: [16, 46, 23, 72, 55, 78],\r\n                        data: data,\r\n                        fill: true,\r\n                        borderColor: gradientStroke,\r\n                        pointBorderColor: gradientStroke,\r\n                        pointBackgroundColor: gradientStroke,\r\n                        pointBorderWidth: 2,\r\n                        pointHoverRadius: 2,\r\n                        pointRadius: 2,\r\n                        backgroundColor: gradientFill,\r\n                        //hoverBackgroundColor:\r\n                        hoverBorderColor: \"#FACD83\",\r\n                        borderWidth: 2.5,\r\n                    }\r\n                ]\r\n            },\r\n            options: {\r\n                //Customize chart options\r\n                legend: {\r\n                    position: \"bottom\"\r\n                },\r\n                tooltips: {\r\n                    mode: 'index',\r\n                    intersect: false,\r\n                },\r\n                hover: {\r\n                    mode: 'nearest',\r\n                    intersect: false,\r\n                    animationDuration: 0\r\n                },\r\n                scales: {\r\n                    xAxes: [{\r\n                        //barThickness: 30,\r\n                        type: 'time',\r\n                        time: {\r\n                            padding: 15,\r\n                            fontStyle: \"bold\",\r\n                            parser: 'YY-MM-DD HH:mm:ss',\r\n                            unit: 'hour',\r\n                            unitStepSize: 1,\r\n                            displayFormat: {\r\n                                hour: 'MM-DD HH:mm'\r\n                            }\r\n                        },\r\n                        ticks: {\r\n                            autoSkip: true,\r\n                            source: 'auto'\r\n                        }\r\n                    }],\r\n                    // yAxes: [{\r\n                    //     scaleLabel: {\r\n                    //         //display: true,\r\n                    //         //labelString: 'Work Count'\r\n                    //     },\r\n                    //     ticks: {\r\n                    //         fontColor: \"rgba(0,0,0,0.8)\",\r\n                    //         fontStyle: \"bold\",\r\n                    //         maxTicksLimit: 5,\r\n                    //         padding: 15,\r\n                    //         beginAtZero: true,\r\n                    //         stepValue: 5,\r\n                    //         steps: 10\r\n                    //     }\r\n                    // }],\r\n                    tooltips: {\r\n                        intersect: false,\r\n                        mode: 'index',\r\n                        callbacks: {\r\n                            label: function (tooltipItem, myData) {\r\n                                var label = myData.datasets[tooltipItem.datasetIndex].label || '';\r\n                                if (label) {\r\n                                    label += ': ';\r\n                                }\r\n                                label += parseFloat(tooltipItem.value).toFixed(2);\r\n                                return label;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        })\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"chart_section\">\r\n                <h3>WorK Count [CNT]</h3>\r\n                <div className=\"chart_cnt\">\r\n                    <canvas id=\"myCountChart\" ref={this.chartRef}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}