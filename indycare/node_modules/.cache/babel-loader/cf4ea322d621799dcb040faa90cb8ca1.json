{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Documents\\\\React\\\\indycare\\\\src\\\\components\\\\Robot\\\\RobotChart.js\";\nimport React from 'react';\nimport Axios from 'axios';\nimport Chart from 'chart.js';\nexport class ChartSection extends React.Component {\n  constructor(props) {\n    super(props);\n    this.myChart = React.createRef();\n    this.state = {\n      kpi: {},\n      date: new Date()\n    };\n  }\n\n  componentDidMount() {\n    Axios.get('http://localhost:4000/get/kpi/' + this.props.sn).then(res => {\n      //console.log(res);\n      this.setState({\n        kpi: res.data\n      });\n    }).catch(err => {\n      alert(err);\n    }).finally(() => {\n      console.log(this.state);\n    });\n    this.chartID = setInterval(() => this.chart(), 15000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.chartID);\n  }\n\n  chart() {\n    const res = this.state.kpi.map(kpi => {\n      this.get_chart(kpi);\n    });\n  }\n\n  get_chart(kpi) {\n    Axios.get('http://localhost:4000/chart/data/' + this.props.sn + '/' + kpi.axis + '/' + kpi.key + '/recent/' + kpi.period).then(res => {\n      console.log(res.data);\n      this.create_count_chart(kpi.kpi, res.data);\n    }).catch(err => {\n      alert(err);\n    });\n  }\n\n  create_count_chart(index, data) {\n    const canvas = this.myChart.current.getContext('2d'); //let cfg = this.count_cfg(canvas, data);\n\n    canvas.canvas.width = 490;\n    canvas.canvas.height = 300;\n    let cfg = {\n      type: 'line',\n      data: {\n        labels: ['A', 'B', 'C'],\n        datasets: [{\n          label: 'sales',\n          data: [64, 23, 77]\n        }]\n      },\n      options: {}\n    };\n    new Chart(canvas, cfg); // window[index] = new Chart(ctx, cfg);\n  }\n\n  count_cfg(ctx, data) {\n    let gradientStroke = ctx.createLinearGradient(0, 0, 0, 400);\n    gradientStroke.addColorStop(0, \"#439CFA\");\n    gradientStroke.addColorStop(1, \"#439CFA\");\n    let gradientFill = ctx.createLinearGradient(0, 0, 0, 400);\n    gradientFill.addColorStop(0, \"rgba(173,215,255,1)\");\n    gradientFill.addColorStop(1, \"rgba(173,215,255,0.4\");\n    let dataset = {\n      label: 'Count',\n      data: data,\n      fill: true,\n      borderColor: gradientStroke,\n      pointBorderColor: gradientStroke,\n      pointBackgroundColor: gradientStroke,\n      pointBorderWidth: 2,\n      pointHoverRadius: 2,\n      pointRadius: 2,\n      backgroundColor: gradientFill,\n      //hoverBackgroundColor:\n      hoverBorderColor: \"#FACD83\",\n      borderWidth: 2.5\n    };\n    return {\n      type: 'bar',\n      data: {\n        datasets: [dataset]\n      },\n      options: {\n        legend: {\n          position: \"bottom\"\n        },\n        animation: true,\n        responsive: false,\n        maintainAspectRatio: false,\n        responsiveAnimationDuration: 150,\n        tooltips: {\n          mode: 'index',\n          intersect: false\n        },\n        hover: {\n          mode: 'nearest',\n          intersect: false,\n          animationDuration: 0\n        },\n        scales: {\n          xAxes: [{\n            //barThickness: 30,\n            type: 'time',\n            time: {\n              padding: 15,\n              fontStyle: \"bold\",\n              parser: 'MM-DD HH:mm:ss',\n              unit: 'hour',\n              unitStepSize: 30,\n              displayFormat: {\n                hour: 'MM-DD HH:mm'\n              }\n            },\n            ticks: {\n              autoSkip: true,\n              source: 'auto'\n            }\n          }],\n          yAxes: [{\n            scaleLabel: {//display: true,\n              //labelString: 'Work Count'\n            },\n            ticks: {\n              fontColor: \"rgba(0,0,0,0.8)\",\n              fontStyle: \"bold\",\n              maxTicksLimit: 5,\n              padding: 15,\n              beginAtZero: true,\n              stepValue: 5,\n              steps: 10\n            }\n          }],\n          tooltips: {\n            intersect: false,\n            mode: 'index',\n            callbacks: {\n              label: function (tooltipItem, myData) {\n                var label = myData.datasets[tooltipItem.datasetIndex].label || '';\n\n                if (label) {\n                  label += ': ';\n                }\n\n                label += parseFloat(tooltipItem.value).toFixed(2);\n                return label;\n              }\n            }\n          }\n        }\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"robot_chart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"chart_section\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, \"WorK Count [CNT]\"), React.createElement(\"div\", {\n      className: \"chart_cnt\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, React.createElement(\"canvas\", {\n      id: \"myCountChart\",\n      ref: this.myChart,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"chart_section\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, \"Temperature [TMP]\"), React.createElement(\"div\", {\n      className: \"chart_tmp\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, React.createElement(\"canvas\", {\n      id: \"myTempChart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }))));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Administrator/Documents/React/indycare/src/components/Robot/RobotChart.js"],"names":["React","Axios","Chart","ChartSection","Component","constructor","props","myChart","createRef","state","kpi","date","Date","componentDidMount","get","sn","then","res","setState","data","catch","err","alert","finally","console","log","chartID","setInterval","chart","componentWillUnmount","clearInterval","map","get_chart","axis","key","period","create_count_chart","index","canvas","current","getContext","width","height","cfg","type","labels","datasets","label","options","count_cfg","ctx","gradientStroke","createLinearGradient","addColorStop","gradientFill","dataset","fill","borderColor","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointRadius","backgroundColor","hoverBorderColor","borderWidth","legend","position","animation","responsive","maintainAspectRatio","responsiveAnimationDuration","tooltips","mode","intersect","hover","animationDuration","scales","xAxes","time","padding","fontStyle","parser","unit","unitStepSize","displayFormat","hour","ticks","autoSkip","source","yAxes","scaleLabel","fontColor","maxTicksLimit","beginAtZero","stepValue","steps","callbacks","tooltipItem","myData","datasetIndex","parseFloat","value","toFixed","render"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Axios from 'axios';\r\nimport Chart from 'chart.js';\r\n\r\nexport class ChartSection extends React.Component {\r\n    myChart = React.createRef();\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            kpi: {},\r\n            date: new Date()\r\n        }\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        Axios.get('http://localhost:4000/get/kpi/' + this.props.sn)\r\n            .then(res => {\r\n                //console.log(res);\r\n                this.setState({kpi: res.data})\r\n            })\r\n            .catch(err => {\r\n                alert(err);\r\n            })\r\n            .finally(() => {\r\n                console.log(this.state);\r\n            });\r\n        this.chartID = setInterval(\r\n            () => this.chart(), 15000\r\n        );\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.chartID);\r\n    }\r\n\r\n    chart() {\r\n        const res = this.state.kpi.map((kpi) => {\r\n            this.get_chart(kpi);\r\n        })\r\n    }\r\n\r\n    get_chart(kpi) {\r\n        Axios.get('http://localhost:4000/chart/data/' + this.props.sn +\r\n            '/' + kpi.axis + '/' + kpi.key + '/recent/' + kpi.period)\r\n            .then(res => {\r\n                console.log(res.data);\r\n                this.create_count_chart(kpi.kpi, res.data)\r\n            })\r\n            .catch(err => {\r\n                alert(err);\r\n            });\r\n    }\r\n\r\n    create_count_chart(index, data) {\r\n        const canvas = this.myChart.current.getContext('2d');\r\n\r\n        //let cfg = this.count_cfg(canvas, data);\r\n\r\n        canvas.canvas.width = 490;\r\n        canvas.canvas.height = 300;\r\n\r\n        let cfg = {\r\n            type: 'line',\r\n            data: {\r\n                labels: ['A', 'B', 'C'],\r\n                datasets: [\r\n                    {\r\n                        label: 'sales',\r\n                        data: [64, 23, 77]\r\n                    }\r\n                ]\r\n            },\r\n            options: {\r\n\r\n            }\r\n        };\r\n\r\n        new Chart(canvas, cfg);\r\n\r\n        // window[index] = new Chart(ctx, cfg);\r\n    }\r\n\r\n    count_cfg(ctx, data) {\r\n        let gradientStroke = ctx.createLinearGradient(0, 0, 0, 400);\r\n        gradientStroke.addColorStop(0, \"#439CFA\");\r\n        gradientStroke.addColorStop(1, \"#439CFA\");\r\n        let gradientFill = ctx.createLinearGradient(0, 0, 0, 400);\r\n        gradientFill.addColorStop(0, \"rgba(173,215,255,1)\");\r\n        gradientFill.addColorStop(1, \"rgba(173,215,255,0.4\");\r\n\r\n        let dataset = {\r\n            label: 'Count',\r\n            data: data,\r\n            fill: true,\r\n            borderColor: gradientStroke,\r\n            pointBorderColor: gradientStroke,\r\n            pointBackgroundColor: gradientStroke,\r\n            pointBorderWidth: 2,\r\n            pointHoverRadius: 2,\r\n            pointRadius: 2,\r\n            backgroundColor: gradientFill,\r\n            //hoverBackgroundColor:\r\n            hoverBorderColor: \"#FACD83\",\r\n            borderWidth: 2.5,\r\n        };\r\n\r\n        return {\r\n            type: 'bar',\r\n            data: {datasets: [dataset]},\r\n            options: {\r\n                legend: {\r\n                    position: \"bottom\"\r\n                },\r\n                animation: true,\r\n                responsive: false,\r\n                maintainAspectRatio: false,\r\n                responsiveAnimationDuration: 150,\r\n                tooltips: {\r\n                    mode: 'index',\r\n                    intersect: false,\r\n                },\r\n                hover: {\r\n                    mode: 'nearest',\r\n                    intersect: false,\r\n                    animationDuration: 0\r\n                },\r\n                scales: {\r\n                    xAxes: [{\r\n                        //barThickness: 30,\r\n                        type: 'time',\r\n                        time: {\r\n                            padding: 15,\r\n                            fontStyle: \"bold\",\r\n                            parser: 'MM-DD HH:mm:ss',\r\n                            unit: 'hour',\r\n                            unitStepSize: 30,\r\n                            displayFormat: {\r\n                                hour: 'MM-DD HH:mm'\r\n                            }\r\n                        },\r\n                        ticks: {\r\n                            autoSkip: true,\r\n                            source: 'auto'\r\n                        }\r\n                    }],\r\n                    yAxes: [{\r\n                        scaleLabel: {\r\n                            //display: true,\r\n                            //labelString: 'Work Count'\r\n                        },\r\n                        ticks: {\r\n                            fontColor: \"rgba(0,0,0,0.8)\",\r\n                            fontStyle: \"bold\",\r\n                            maxTicksLimit: 5,\r\n                            padding: 15,\r\n                            beginAtZero: true,\r\n                            stepValue: 5,\r\n                            steps: 10\r\n                        }\r\n                    }],\r\n                    tooltips: {\r\n                        intersect: false,\r\n                        mode: 'index',\r\n                        callbacks: {\r\n                            label: function (tooltipItem, myData) {\r\n                                var label = myData.datasets[tooltipItem.datasetIndex].label || '';\r\n                                if (label) {\r\n                                    label += ': ';\r\n                                }\r\n                                label += parseFloat(tooltipItem.value).toFixed(2);\r\n                                return label;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"robot_chart\">\r\n                <div className=\"chart_section\">\r\n                    <h3>WorK Count [CNT]</h3>\r\n                    <div className=\"chart_cnt\">\r\n                        <canvas id=\"myCountChart\" ref={this.myChart}/>\r\n                    </div>\r\n                </div>\r\n                <div className=\"chart_section\">\r\n                    <h3>Temperature [TMP]</h3>\r\n                    <div className=\"chart_tmp\">\r\n                        <canvas id=\"myTempChart\"/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}