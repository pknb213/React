{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Documents\\\\React\\\\indycare\\\\src\\\\components\\\\Robot\\\\RobotChart.js\";\nimport React from 'react';\nimport Axios from 'axios';\nimport Chart from 'chart.js';\nimport LineGraph from \"../Public/LineGraph\";\nimport BarGraph from \"../Public/BarGraph\";\nexport class ChartSection extends React.Component {\n  constructor(props) {\n    super(props);\n    this.myChart = React.createRef();\n    this.state = {\n      kpi: {},\n      active: 0,\n      labels: {},\n      kpi0: {},\n      data0: {},\n      kpi1: {},\n      data1: {},\n      kpi2: {},\n      data2: {},\n      kpi3: {},\n      data3: {},\n      kpi4: {},\n      data4: {}\n    };\n  }\n\n  componentDidMount() {\n    Axios.get('http://localhost:4000/get/kpi/' + this.props.sn).then(res => {\n      //console.log(res);\n      this.setState({\n        kpi: res.data\n      });\n    }).catch(err => {\n      alert(err);\n    }).finally(() => {\n      console.log(this.state);\n    });\n    this.chartID = setInterval(() => this.chart(), 15000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.chartID);\n  }\n\n  chart() {\n    // kpi.label === '' or kpi.key === 'none'일 땐, 생성 x\n    let i = 0;\n    const res = this.state.kpi.map(kpi => {\n      if (kpi.key !== 'none') {\n        console.log(kpi);\n        this.get_chart(kpi);\n        i++;\n      }\n    });\n    this.setState({\n      active: i\n    });\n  }\n\n  get_chart(kpi) {\n    Axios.get('http://localhost:4000/chart/data/' + this.props.sn + '/' + kpi.axis + '/' + kpi.key + '/recent/' + kpi.period).then(res => {\n      //console.log(res.data);\n      this.setState({\n        [kpi.kpi]: res.data\n      });\n      console.log(this.state);\n      console.log(kpi.kpi);\n    }).catch(err => {\n      alert(err);\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"robot_chart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(BarGraph, {\n      data: this.state.data,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }), React.createElement(LineGraph, {\n      data: [{\n        'x': '2019-11-06 03:16:00',\n        'y': 53\n      }, {\n        'x': '2019-11-06 03:15:00',\n        'y': 11\n      }, {\n        'x': '2019-11-06 03:14:00',\n        'y': 34\n      }, {\n        'x': '2019-11-06 03:13:00',\n        'y': 78\n      }],\n      data2: [{\n        'x': '2019-11-06 03:16:00',\n        'y': 34\n      }, {\n        'x': '2019-11-06 03:15:00',\n        'y': 21\n      }, {\n        'x': '2019-11-06 03:14:00',\n        'y': 66\n      }, {\n        'x': '2019-11-06 03:13:00',\n        'y': 54\n      }],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Administrator/Documents/React/indycare/src/components/Robot/RobotChart.js"],"names":["React","Axios","Chart","LineGraph","BarGraph","ChartSection","Component","constructor","props","myChart","createRef","state","kpi","active","labels","kpi0","data0","kpi1","data1","kpi2","data2","kpi3","data3","kpi4","data4","componentDidMount","get","sn","then","res","setState","data","catch","err","alert","finally","console","log","chartID","setInterval","chart","componentWillUnmount","clearInterval","i","map","key","get_chart","axis","period","render"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Axios from 'axios';\r\nimport Chart from 'chart.js';\r\nimport LineGraph from \"../Public/LineGraph\";\r\nimport BarGraph from \"../Public/BarGraph\";\r\n\r\nexport class ChartSection extends React.Component {\r\n    myChart = React.createRef();\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            kpi: {},\r\n            active: 0,\r\n            labels: {},\r\n            kpi0: {},\r\n            data0: {},\r\n            kpi1: {},\r\n            data1: {},\r\n            kpi2: {},\r\n            data2: {},\r\n            kpi3: {},\r\n            data3: {},\r\n            kpi4: {},\r\n            data4: {},\r\n        }\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        Axios.get('http://localhost:4000/get/kpi/' + this.props.sn)\r\n            .then(res => {\r\n                //console.log(res);\r\n                this.setState({kpi: res.data})\r\n            })\r\n            .catch(err => {\r\n                alert(err);\r\n            })\r\n            .finally(() => {\r\n                console.log(this.state);\r\n            });\r\n        this.chartID = setInterval(\r\n            () => this.chart(), 15000\r\n        );\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.chartID);\r\n    }\r\n\r\n    chart() {\r\n        // kpi.label === '' or kpi.key === 'none'일 땐, 생성 x\r\n        let i = 0;\r\n        const res = this.state.kpi.map((kpi) => {\r\n            if (kpi.key !== 'none') {\r\n                console.log(kpi);\r\n                this.get_chart(kpi);\r\n                i++;\r\n            }\r\n        });\r\n        this.setState({active: i})\r\n    }\r\n\r\n    get_chart(kpi) {\r\n        Axios.get('http://localhost:4000/chart/data/' + this.props.sn +\r\n            '/' + kpi.axis + '/' + kpi.key + '/recent/' + kpi.period)\r\n            .then(res => {\r\n                //console.log(res.data);\r\n                this.setState({[kpi.kpi] : res.data});\r\n                console.log(this.state);\r\n                console.log(kpi.kpi);\r\n            })\r\n            .catch(err => {\r\n                alert(err);\r\n            });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"robot_chart\">\r\n                <BarGraph data={this.state.data}/>\r\n                <LineGraph data={[{'x': '2019-11-06 03:16:00', 'y': 53},\r\n                    {'x': '2019-11-06 03:15:00', 'y': 11},\r\n                    {'x': '2019-11-06 03:14:00', 'y': 34},\r\n                    {'x': '2019-11-06 03:13:00', 'y': 78}]}\r\n                           data2={[{'x': '2019-11-06 03:16:00', 'y': 34},\r\n                               {'x': '2019-11-06 03:15:00', 'y': 21},\r\n                               {'x': '2019-11-06 03:14:00', 'y': 66},\r\n                               {'x': '2019-11-06 03:13:00', 'y': 54}]}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}