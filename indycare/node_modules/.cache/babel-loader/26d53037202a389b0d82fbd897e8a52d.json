{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Documents\\\\React\\\\indycare\\\\src\\\\components\\\\Robot\\\\State.js\";\nimport React from 'react';\nimport Axios from \"axios\";\nimport busyIcon from \"../../resources/Robot/active/icon_busy.svg\";\nimport readyIcon from \"../../resources/Robot/active/icon_ready.svg\";\nimport collisionIcon from \"../../resources/Robot/active/icon_collision.svg\";\nimport errorIcon from \"../../resources/Robot/active/icon_error.svg\";\nimport statePlayIcon from \"../../resources/Robot/active/icon_state_play.svg\";\nimport statePauseIcon from \"../../resources/Robot/active/icon_state_pause.svg\";\nimport emergencyIcon from \"../../resources/Robot/active/icon_energency.svg\";\nimport reporterConnectIcon from \"../../resources/Robot/active/icon_report_connected.svg\";\nimport serverConnectIcon from \"../../resources/Robot/active/icon_server_connected.svg\";\nimport unbusyIcon from \"../../resources/Robot/inactive/icon_busy.svg\";\nimport unreadyIcon from \"../../resources/Robot/inactive/icon_ready.svg\";\nimport uncollisionIcon from \"../../resources/Robot/inactive/icon_collision.svg\";\nimport unerrorIcon from \"../../resources/Robot/inactive/icon_error.svg\";\nimport unstateStopIcon from \"../../resources/Robot/inactive/icon_state_stop.svg\";\nimport unemergencyIcon from \"../../resources/Robot/inactive/icon_energency.svg\";\nimport reporterNotConnectIcon from \"../../resources/Robot/inactive/icon_report_connected.svg\";\nimport serverNotConnectIcon from \"../../resources/Robot/inactive/icon_server_connected.svg\";\nimport { PText } from \"../Public/Text\";\nimport { Img, ImgOnly } from \"../Public/Image\";\n\nfunction StateDiv(props) {\n  //console.log(props.state.data);\n  let state = props.state.data;\n  if (state === undefined) state = {};\n  let rows = [];\n  console.log(state); // 0 ~ 9\n\n  for (let key in state) {\n    let imgElement;\n    console.log(key, state[key]);\n\n    if (state.hasOwnProperty(key)) {\n      if (state[key] > 0) {\n        if (key === 'busy') imgElement = React.createElement(ImgOnly, {\n          src: busyIcon,\n          text: 'BUSY',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 39\n          },\n          __self: this\n        });else if (key === 'ready') imgElement = React.createElement(ImgOnly, {\n          src: readyIcon,\n          text: 'READY',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 41\n          },\n          __self: this\n        });else if (key === 'collision') imgElement = React.createElement(ImgOnly, {\n          src: collisionIcon,\n          text: 'COLLISION',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43\n          },\n          __self: this\n        });else if (key === 'error') imgElement = React.createElement(ImgOnly, {\n          src: errorIcon,\n          text: 'ERROR',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45\n          },\n          __self: this\n        });else if (state[key] === 2) imgElement = React.createElement(ImgOnly, {\n          src: statePauseIcon,\n          text: 'PROGRAM STATE',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47\n          },\n          __self: this\n        });else if (key === 'program_state') imgElement = React.createElement(ImgOnly, {\n          src: statePlayIcon,\n          text: 'PROGRAM STATE',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49\n          },\n          __self: this\n        });else if (key === 'emergency') imgElement = React.createElement(ImgOnly, {\n          src: emergencyIcon,\n          text: 'EMERGENCY',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51\n          },\n          __self: this\n        });else if (key === 'report_connected') imgElement = React.createElement(ImgOnly, {\n          src: reporterConnectIcon,\n          text: 'ROBOT CONNECTED',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53\n          },\n          __self: this\n        });else if (key === 'server_connected') imgElement = React.createElement(ImgOnly, {\n          src: serverConnectIcon,\n          text: 'SERVER CONNECTED',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55\n          },\n          __self: this\n        });\n        rows.push(React.createElement(\"li\", {\n          id: key + '_li',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57\n          },\n          __self: this\n        }, imgElement));\n      } else {\n        if (key === 'busy') imgElement = React.createElement(ImgOnly, {\n          src: unbusyIcon,\n          text: 'BUSY',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60\n          },\n          __self: this\n        });else if (key === 'ready') imgElement = React.createElement(ImgOnly, {\n          src: unreadyIcon,\n          text: 'READY',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62\n          },\n          __self: this\n        });else if (key === 'collision') imgElement = React.createElement(ImgOnly, {\n          src: uncollisionIcon,\n          text: 'COLLISION',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64\n          },\n          __self: this\n        });else if (key === 'error') imgElement = React.createElement(ImgOnly, {\n          src: unerrorIcon,\n          text: 'ERROR',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66\n          },\n          __self: this\n        });else if (key === 'program_state') imgElement = React.createElement(ImgOnly, {\n          src: unstateStopIcon,\n          text: 'PROGRAM STATE',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68\n          },\n          __self: this\n        });else if (key === 'emergency') imgElement = React.createElement(ImgOnly, {\n          src: unemergencyIcon,\n          text: 'EMERGENCY',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70\n          },\n          __self: this\n        });else if (key === 'report_connected') imgElement = React.createElement(ImgOnly, {\n          src: reporterNotConnectIcon,\n          text: 'ROBOT CONNECTED',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72\n          },\n          __self: this\n        });else if (key === 'server_connected') imgElement = React.createElement(ImgOnly, {\n          src: serverNotConnectIcon,\n          text: 'SERVER CONNECTED',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74\n          },\n          __self: this\n        });\n        rows.push(React.createElement(\"li\", {\n          id: key + '_li',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76\n          },\n          __self: this\n        }, imgElement));\n      }\n    } else alert(\"Error입니다\");\n  }\n\n  return React.createElement(\"div\", {\n    className: \"robot_state_noti\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(\"ul\", {\n    id: \"stateUI\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, rows));\n}\n\nclass StateView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      robotState: {\n        'busy': 0,\n        'collision': 0,\n        'emergency': 0,\n        'error': 0,\n        'home': 0,\n        'finish': 0,\n        'ready': 0,\n        'resetting': 0,\n        'zero': 0,\n        'is_server_connected': 0\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.stateID = setInterval(() => this.tick(), 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.stateID);\n  }\n\n  tick() {\n    Axios.post('http://localhost:4000/robot/state/' + this.props.sn).then(res => {\n      //console.log(res);\n      this.setState({\n        robotState: res\n      });\n    }).catch(err => {\n      alert(err);\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"robot_state\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"robot_state_info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, \"Robot State\"), React.createElement(StateDiv, {\n      state: this.state.robotState,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default StateView;","map":{"version":3,"sources":["C:/Users/Administrator/Documents/React/indycare/src/components/Robot/State.js"],"names":["React","Axios","PText","Img","ImgOnly","StateDiv","props","state","data","undefined","rows","console","log","key","imgElement","hasOwnProperty","busyIcon","readyIcon","collisionIcon","errorIcon","statePauseIcon","statePlayIcon","emergencyIcon","reporterConnectIcon","serverConnectIcon","push","unbusyIcon","unreadyIcon","uncollisionIcon","unerrorIcon","unstateStopIcon","unemergencyIcon","reporterNotConnectIcon","serverNotConnectIcon","alert","StateView","Component","constructor","robotState","componentDidMount","stateID","setInterval","tick","componentWillUnmount","clearInterval","post","sn","then","res","setState","catch","err","render"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Axios from \"axios\";\r\nimport busyIcon from '../../resources/Robot/active/icon_busy.svg';\r\nimport readyIcon from '../../resources/Robot/active/icon_ready.svg';\r\nimport collisionIcon from '../../resources/Robot/active/icon_collision.svg';\r\nimport errorIcon from '../../resources/Robot/active/icon_error.svg';\r\nimport statePlayIcon from '../../resources/Robot/active/icon_state_play.svg';\r\nimport statePauseIcon from '../../resources/Robot/active/icon_state_pause.svg';\r\nimport emergencyIcon from '../../resources/Robot/active/icon_energency.svg';\r\nimport reporterConnectIcon from '../../resources/Robot/active/icon_report_connected.svg';\r\nimport serverConnectIcon from '../../resources/Robot/active/icon_server_connected.svg';\r\nimport unbusyIcon from '../../resources/Robot/inactive/icon_busy.svg';\r\nimport unreadyIcon from '../../resources/Robot/inactive/icon_ready.svg';\r\nimport uncollisionIcon from '../../resources/Robot/inactive/icon_collision.svg';\r\nimport unerrorIcon from '../../resources/Robot/inactive/icon_error.svg';\r\nimport unstateStopIcon from '../../resources/Robot/inactive/icon_state_stop.svg';\r\nimport unemergencyIcon from '../../resources/Robot/inactive/icon_energency.svg';\r\nimport reporterNotConnectIcon from '../../resources/Robot/inactive/icon_report_connected.svg';\r\nimport serverNotConnectIcon from '../../resources/Robot/inactive/icon_server_connected.svg';\r\nimport {PText} from \"../Public/Text\";\r\nimport {Img, ImgOnly} from \"../Public/Image\";\r\n\r\nfunction StateDiv(props) {\r\n    //console.log(props.state.data);\r\n    let state = props.state.data;\r\n    if (state === undefined)\r\n        state = {};\r\n\r\n    let rows = [];\r\n\r\n    console.log(state);\r\n    // 0 ~ 9\r\n    for (let key in state) {\r\n        let imgElement;\r\n        console.log(key, state[key]);\r\n        if (state.hasOwnProperty(key)) {\r\n            if (state[key] > 0) {\r\n                if (key === 'busy')\r\n                    imgElement = <ImgOnly src={busyIcon} text={'BUSY'}/>;\r\n                else if (key === 'ready')\r\n                    imgElement = <ImgOnly src={readyIcon} text={'READY'}/>;\r\n                else if (key === 'collision')\r\n                    imgElement = <ImgOnly src={collisionIcon} text={'COLLISION'}/>;\r\n                else if (key === 'error')\r\n                    imgElement = <ImgOnly src={errorIcon} text={'ERROR'}/>;\r\n                else if (state[key] === 2)\r\n                    imgElement = <ImgOnly src={statePauseIcon} text={'PROGRAM STATE'}/>;\r\n                else if (key === 'program_state')\r\n                    imgElement = <ImgOnly src={statePlayIcon} text={'PROGRAM STATE'}/>;\r\n                else if (key === 'emergency')\r\n                    imgElement = <ImgOnly src={emergencyIcon} text={'EMERGENCY'}/>;\r\n                else if (key === 'report_connected')\r\n                    imgElement = <ImgOnly src={reporterConnectIcon} text={'ROBOT CONNECTED'}/>;\r\n                else if (key === 'server_connected')\r\n                    imgElement = <ImgOnly src={serverConnectIcon} text={'SERVER CONNECTED'}/>;\r\n\r\n                rows.push(<li id={key + '_li'}>{imgElement}</li>);\r\n            } else {\r\n                if (key === 'busy')\r\n                    imgElement = <ImgOnly src={unbusyIcon} text={'BUSY'}/>;\r\n                else if (key === 'ready')\r\n                    imgElement = <ImgOnly src={unreadyIcon} text={'READY'}/>;\r\n                else if (key === 'collision')\r\n                    imgElement = <ImgOnly src={uncollisionIcon} text={'COLLISION'}/>;\r\n                else if (key === 'error')\r\n                    imgElement = <ImgOnly src={unerrorIcon} text={'ERROR'}/>;\r\n                else if (key === 'program_state')\r\n                    imgElement = <ImgOnly src={unstateStopIcon} text={'PROGRAM STATE'}/>;\r\n                else if (key === 'emergency')\r\n                    imgElement = <ImgOnly src={unemergencyIcon} text={'EMERGENCY'}/>;\r\n                else if (key === 'report_connected')\r\n                    imgElement = <ImgOnly src={reporterNotConnectIcon} text={'ROBOT CONNECTED'}/>;\r\n                else if (key === 'server_connected')\r\n                    imgElement = <ImgOnly src={serverNotConnectIcon} text={'SERVER CONNECTED'}/>;\r\n\r\n                rows.push(<li id={key + '_li'}>{imgElement}</li>);\r\n            }\r\n        } else\r\n            alert(\"Error입니다\");\r\n    }\r\n\r\n    return (\r\n        <div className=\"robot_state_noti\">\r\n            <ul id=\"stateUI\">\r\n                {rows}\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nclass StateView extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            robotState: {\r\n                'busy': 0, 'collision': 0, 'emergency': 0, 'error': 0, 'home': 0,\r\n                'finish': 0, 'ready': 0, 'resetting': 0, 'zero': 0, 'is_server_connected': 0\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.stateID = setInterval(\r\n            () => this.tick(), 1000\r\n        );\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.stateID)\r\n    }\r\n\r\n    tick() {\r\n        Axios.post('http://localhost:4000/robot/state/' + this.props.sn)\r\n            .then(res => {\r\n                    //console.log(res);\r\n                    this.setState({robotState: res});\r\n                }\r\n            )\r\n            .catch(err => {\r\n                    alert(err);\r\n                }\r\n            )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"robot_state\">\r\n                <div className=\"robot_state_info\">\r\n                    <h3>Robot State</h3>\r\n                    <StateDiv state={this.state.robotState}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default StateView;\r\n\r\n"]},"metadata":{},"sourceType":"module"}