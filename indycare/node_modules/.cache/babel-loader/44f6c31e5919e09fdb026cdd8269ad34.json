{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Documents\\\\React\\\\indycare\\\\src\\\\components\\\\Robot\\\\RobotChart.js\";\nimport React from 'react';\nimport Axios from 'axios';\nimport Chart from 'chart.js';\nimport LineGraph from \"../Public/LineGraph\";\nimport BarGraph from \"../Public/BarGraph\";\nexport class ChartSection extends React.Component {\n  constructor(props) {\n    super(props);\n    this.myChart = React.createRef();\n    this.state = {\n      kpi: {},\n      data: {},\n      labels: {}\n    };\n  }\n\n  componentDidMount() {\n    Axios.get('http://localhost:4000/get/kpi/' + this.props.sn).then(res => {\n      //console.log(res);\n      this.setState({\n        kpi: res.data\n      });\n    }).catch(err => {\n      alert(err);\n    }).finally(() => {\n      console.log(this.state);\n    });\n    this.chartID = setInterval(() => this.chart(), 15000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.chartID);\n  }\n\n  chart() {\n    const res = this.state.kpi.map(kpi => {\n      this.get_chart(kpi);\n    });\n  }\n\n  get_chart(kpi) {\n    Axios.get('http://localhost:4000/chart/data/' + this.props.sn + '/' + kpi.axis + '/' + kpi.key + '/recent/' + kpi.period).then(res => {\n      console.log(res.data);\n      this.create_count_chart(kpi.kpi, res.data);\n    }).catch(err => {\n      alert(err);\n    });\n  }\n\n  create_count_chart(index, data) {\n    const canvas = this.myChart.current.getContext('2d'); //let cfg = this.count_cfg(canvas, data);\n\n    canvas.canvas.width = 490;\n    canvas.canvas.height = 300;\n    let cfg = {\n      type: 'line',\n      data: {\n        labels: ['A', 'B', 'C'],\n        datasets: [{\n          label: 'sales',\n          data: [64, 23, 77]\n        }]\n      },\n      options: {}\n    }; //new Chart(canvas, cfg);\n    // window[index] = new Chart(ctx, cfg);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"robot_chart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(LineGraph, {\n      data: [{\n        'x': '11-06 03:16:00',\n        'y': 53\n      }, {\n        'x': '11-06 03:15:00',\n        'y': 11\n      }, {\n        'x': '11-06 03:14:00',\n        'y': 34\n      }, {\n        'x': '11-06 03:13:00',\n        'y': 78\n      }],\n      data2: [{\n        'x': '11-06 03:16:00',\n        'y': 34\n      }, {\n        'x': '11-06 03:15:00',\n        'y': 21\n      }, {\n        'x': '11-06 03:14:00',\n        'y': 66\n      }, {\n        'x': '11-06 03:13:00',\n        'y': 54\n      }],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }), React.createElement(BarGraph, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Administrator/Documents/React/indycare/src/components/Robot/RobotChart.js"],"names":["React","Axios","Chart","LineGraph","BarGraph","ChartSection","Component","constructor","props","myChart","createRef","state","kpi","data","labels","componentDidMount","get","sn","then","res","setState","catch","err","alert","finally","console","log","chartID","setInterval","chart","componentWillUnmount","clearInterval","map","get_chart","axis","key","period","create_count_chart","index","canvas","current","getContext","width","height","cfg","type","datasets","label","options","render"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Axios from 'axios';\r\nimport Chart from 'chart.js';\r\nimport LineGraph from \"../Public/LineGraph\";\r\nimport BarGraph from \"../Public/BarGraph\";\r\n\r\nexport class ChartSection extends React.Component {\r\n    myChart = React.createRef();\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            kpi: {},\r\n            data: {},\r\n            labels: {}\r\n        }\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        Axios.get('http://localhost:4000/get/kpi/' + this.props.sn)\r\n            .then(res => {\r\n                //console.log(res);\r\n                this.setState({kpi: res.data})\r\n            })\r\n            .catch(err => {\r\n                alert(err);\r\n            })\r\n            .finally(() => {\r\n                console.log(this.state);\r\n            });\r\n        this.chartID = setInterval(\r\n            () => this.chart(), 15000\r\n        );\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.chartID);\r\n    }\r\n\r\n    chart() {\r\n        const res = this.state.kpi.map((kpi) => {\r\n            this.get_chart(kpi);\r\n        })\r\n    }\r\n\r\n    get_chart(kpi) {\r\n        Axios.get('http://localhost:4000/chart/data/' + this.props.sn +\r\n            '/' + kpi.axis + '/' + kpi.key + '/recent/' + kpi.period)\r\n            .then(res => {\r\n                console.log(res.data);\r\n                this.create_count_chart(kpi.kpi, res.data)\r\n            })\r\n            .catch(err => {\r\n                alert(err);\r\n            });\r\n    }\r\n\r\n    create_count_chart(index, data) {\r\n        const canvas = this.myChart.current.getContext('2d');\r\n\r\n        //let cfg = this.count_cfg(canvas, data);\r\n\r\n        canvas.canvas.width = 490;\r\n        canvas.canvas.height = 300;\r\n\r\n        let cfg = {\r\n            type: 'line',\r\n            data: {\r\n                labels: ['A', 'B', 'C'],\r\n                datasets: [\r\n                    {\r\n                        label: 'sales',\r\n                        data: [64, 23, 77]\r\n                    }\r\n                ]\r\n            },\r\n            options: {\r\n\r\n            }\r\n        };\r\n\r\n        //new Chart(canvas, cfg);\r\n\r\n        // window[index] = new Chart(ctx, cfg);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"robot_chart\">\r\n                <LineGraph data={[{'x': '11-06 03:16:00', 'y': 53},\r\n                        {'x': '11-06 03:15:00', 'y': 11},\r\n                        {'x': '11-06 03:14:00', 'y': 34},\r\n                        {'x': '11-06 03:13:00', 'y': 78}]}\r\n                           data2={[{'x': '11-06 03:16:00', 'y': 34},\r\n                        {'x': '11-06 03:15:00', 'y': 21},\r\n                        {'x': '11-06 03:14:00', 'y': 66},\r\n                        {'x': '11-06 03:13:00', 'y': 54}]}/>\r\n                <BarGraph/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}