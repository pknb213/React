{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Documents\\\\React\\\\indycare\\\\src\\\\components\\\\Robot\\\\RobotChart.js\";\nimport React from 'react';\nimport Axios from 'axios';\nimport LineGraph from \"../Public/LineGraph\";\nimport BarGraph from \"../Public/BarGraph\";\nexport class ChartSection extends React.Component {\n  constructor(props) {\n    super(props);\n    this.myChart = React.createRef();\n    this.state = {\n      kpi: {},\n      active: 0,\n      labels: {},\n      kpi0: {},\n      kpi1: {},\n      kpi2: {},\n      kpi3: {},\n      kpi4: {}\n    };\n  }\n\n  componentDidMount() {\n    Axios.get('http://localhost:4000/get/kpi/' + this.props.sn).then(res => {\n      //console.log(res);\n      this.setState({\n        kpi: res.data\n      });\n      this.chart(); // Before Loop\n    }).catch(err => {\n      alert(err);\n    }).finally(() => {\n      console.log(this.state);\n    });\n    this.chartID = setInterval(() => this.chart(), 3000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.chartID);\n  }\n\n  chart() {\n    // kpi.label === '' or kpi.key === 'none'일 땐, 생성 x\n    let i = 0;\n    const res = this.state.kpi.map(kpi => {\n      if (kpi.key !== 'none') {\n        // console.log(kpi);\n        this.get_data(kpi);\n        i++;\n      } else {\n        this.setState({\n          [kpi.kpi]: ''\n        });\n      }\n    });\n    this.setState({\n      active: i\n    }); //console.log(this.state);\n  }\n\n  get_data(kpi) {\n    Axios.get('http://localhost:4000/chart/data/' + this.props.sn + '/' + kpi.axis + '/' + kpi.key + '/recent/' + kpi.period).then(res => {\n      //console.log(res.data);\n      this.setState({\n        [kpi.kpi]: res.data\n      });\n    }).catch(err => {\n      alert(err);\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"robot_chart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(BarGraph, {\n      data: this.state.kpi0,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }), React.createElement(LineGraph, {\n      data: [this.state.kpi0, this.state.kpi1, this.state.kpi2, this.state.kpi3],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Administrator/Documents/React/indycare/src/components/Robot/RobotChart.js"],"names":["React","Axios","LineGraph","BarGraph","ChartSection","Component","constructor","props","myChart","createRef","state","kpi","active","labels","kpi0","kpi1","kpi2","kpi3","kpi4","componentDidMount","get","sn","then","res","setState","data","chart","catch","err","alert","finally","console","log","chartID","setInterval","componentWillUnmount","clearInterval","i","map","key","get_data","axis","period","render"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Axios from 'axios';\r\nimport LineGraph from \"../Public/LineGraph\";\r\nimport BarGraph from \"../Public/BarGraph\";\r\n\r\nexport class ChartSection extends React.Component {\r\n    myChart = React.createRef();\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            kpi: {},\r\n            active: 0,\r\n            labels: {},\r\n            kpi0: {},\r\n            kpi1: {},\r\n            kpi2: {},\r\n            kpi3: {},\r\n            kpi4: {},\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        Axios.get('http://localhost:4000/get/kpi/' + this.props.sn)\r\n            .then(res => {\r\n                //console.log(res);\r\n                this.setState({kpi: res.data});\r\n                this.chart(); // Before Loop\r\n            })\r\n            .catch(err => {\r\n                alert(err);\r\n            })\r\n            .finally(() => {\r\n                console.log(this.state);\r\n            });\r\n        this.chartID = setInterval(\r\n            () => this.chart(), 3000\r\n        );\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.chartID);\r\n    }\r\n\r\n    chart() {\r\n        // kpi.label === '' or kpi.key === 'none'일 땐, 생성 x\r\n        let i = 0;\r\n        const res = this.state.kpi.map((kpi) => {\r\n            if (kpi.key !== 'none') {\r\n                // console.log(kpi);\r\n                this.get_data(kpi);\r\n                i++;\r\n            }\r\n            else{\r\n                this.setState({[kpi.kpi]: ''})\r\n            }\r\n        });\r\n        this.setState({active: i});\r\n        //console.log(this.state);\r\n    }\r\n\r\n    get_data(kpi) {\r\n        Axios.get('http://localhost:4000/chart/data/' + this.props.sn +\r\n            '/' + kpi.axis + '/' + kpi.key + '/recent/' + kpi.period)\r\n            .then(res => {\r\n                //console.log(res.data);\r\n                this.setState({[kpi.kpi] : res.data});\r\n            })\r\n            .catch(err => {\r\n                alert(err);\r\n            });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"robot_chart\">\r\n                <BarGraph data={this.state.kpi0}/>\r\n                <LineGraph data={[this.state.kpi0,this.state.kpi1,this.state.kpi2,this.state.kpi3]}/>\r\n            </div>\r\n        );\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}