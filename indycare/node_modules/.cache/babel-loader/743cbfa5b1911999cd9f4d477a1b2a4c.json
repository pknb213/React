{"ast":null,"code":"import _classCallCheck from\"C:\\\\Users\\\\Administrator\\\\Documents\\\\React\\\\indycare\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\Administrator\\\\Documents\\\\React\\\\indycare\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"C:\\\\Users\\\\Administrator\\\\Documents\\\\React\\\\indycare\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"C:\\\\Users\\\\Administrator\\\\Documents\\\\React\\\\indycare\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";import _inherits from\"C:\\\\Users\\\\Administrator\\\\Documents\\\\React\\\\indycare\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import React from'react';import Chart from'chart.js';var myBarChart;// Chart.default.global.defaultFontFamily = \"'PT Sans', sans-serif\";\n// Chart.default.global.legend.display = false;\nvar BarGraph=/*#__PURE__*/function(_React$PureComponent){_inherits(BarGraph,_React$PureComponent);function BarGraph(){var _getPrototypeOf2;var _this;_classCallCheck(this,BarGraph);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_possibleConstructorReturn(this,(_getPrototypeOf2=_getPrototypeOf(BarGraph)).call.apply(_getPrototypeOf2,[this].concat(args)));_this.chartRef=React.createRef();_this.buildChart=function(){var myChartRef=_this.chartRef.current.getContext(\"2d\");myChartRef.canvas.width='490px';myChartRef.canvas.height='300px';var gradientStroke=myChartRef.createLinearGradient(0,0,0,400);gradientStroke.addColorStop(0,\"#439CFA\");gradientStroke.addColorStop(1,\"#439CFA\");var gradientFill=myChartRef.createLinearGradient(0,0,0,400);gradientFill.addColorStop(0,\"rgba(173,215,255,1)\");gradientFill.addColorStop(1,\"rgba(173,215,255,0.4\");var data=_this.props.data;if(typeof myBarChart!==\"undefined\")myBarChart.destroy();myBarChart=new Chart(myChartRef,{type:'bar',data:{// Bring in data\n//labels: ['a', 'b', 'c', 'd', 'e', 'f'],\n// labels: labels\ndatasets:[{label:\"Count\",//data: [16, 46, 23, 72, 55, 78],\ndata:data,fill:true,borderColor:gradientStroke,pointBorderColor:gradientStroke,pointBackgroundColor:gradientStroke,pointBorderWidth:2,pointHoverRadius:2,pointRadius:2,backgroundColor:gradientFill,//hoverBackgroundColor:\nhoverBorderColor:\"#FACD83\",borderWidth:2.5}]},options:{//Customize chart options\nlegend:{position:\"bottom\"},tooltips:{mode:'index',intersect:false},hover:{mode:'nearest',intersect:false,animationDuration:0},scales:{xAxes:[{//barThickness: 30,\ntype:'time',time:{padding:15,fontStyle:\"bold\",parser:'YY-MM-DD HH:mm:ss',unit:'minute',unitStepSize:15,displayFormat:{hour:'MM-DD HH:mm'}},ticks:{autoSkip:true,source:'auto'}}],// yAxes: [{\n//     scaleLabel: {\n//         //display: true,\n//         //labelString: 'Work Count'\n//     },\n//     ticks: {\n//         fontColor: \"rgba(0,0,0,0.8)\",\n//         fontStyle: \"bold\",\n//         maxTicksLimit: 5,\n//         padding: 15,\n//         beginAtZero: true,\n//         stepValue: 5,\n//         steps: 10\n//     }\n// }],\ntooltips:{intersect:false,mode:'index',callbacks:{label:function label(tooltipItem,myData){var label=myData.datasets[tooltipItem.datasetIndex].label||'';if(label){label+=': ';}label+=parseFloat(tooltipItem.value).toFixed(2);return label;}}}}}});};return _this;}_createClass(BarGraph,[{key:\"componentDidMount\",value:function componentDidMount(){this.buildChart();}},{key:\"componentDidUpdate\",value:function componentDidUpdate(prevProps,prevState,snapshot){this.buildChart();}},{key:\"render\",value:function render(){return React.createElement(\"div\",{className:\"chart_section\"},React.createElement(\"h3\",null,\"WorK Count [CNT]\"),React.createElement(\"div\",{className:\"chart_cnt\"},React.createElement(\"canvas\",{id:\"myCountChart\",ref:this.chartRef})));}}]);return BarGraph;}(React.PureComponent);export{BarGraph as default};","map":{"version":3,"sources":["C:/Users/Administrator/Documents/React/indycare/src/components/Public/BarGraph.js"],"names":["React","Chart","myBarChart","BarGraph","chartRef","createRef","buildChart","myChartRef","current","getContext","canvas","width","height","gradientStroke","createLinearGradient","addColorStop","gradientFill","data","props","destroy","type","datasets","label","fill","borderColor","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointRadius","backgroundColor","hoverBorderColor","borderWidth","options","legend","position","tooltips","mode","intersect","hover","animationDuration","scales","xAxes","time","padding","fontStyle","parser","unit","unitStepSize","displayFormat","hour","ticks","autoSkip","source","callbacks","tooltipItem","myData","datasetIndex","parseFloat","value","toFixed","prevProps","prevState","snapshot","PureComponent"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Chart from 'chart.js';\r\n\r\nlet myBarChart;\r\n\r\n// Chart.default.global.defaultFontFamily = \"'PT Sans', sans-serif\";\r\n// Chart.default.global.legend.display = false;\r\n\r\nexport default class BarGraph extends React.PureComponent {\r\n    chartRef = React.createRef();\r\n\r\n    componentDidMount() {\r\n        this.buildChart();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        this.buildChart();\r\n    }\r\n\r\n    buildChart = () => {\r\n        let myChartRef = this.chartRef.current.getContext(\"2d\");\r\n        myChartRef.canvas.width = '490px';\r\n        myChartRef.canvas.height = '300px';\r\n        let gradientStroke = myChartRef.createLinearGradient(0, 0, 0, 400);\r\n        gradientStroke.addColorStop(0, \"#439CFA\");\r\n        gradientStroke.addColorStop(1, \"#439CFA\");\r\n        let gradientFill = myChartRef.createLinearGradient(0, 0, 0, 400);\r\n        gradientFill.addColorStop(0, \"rgba(173,215,255,1)\");\r\n        gradientFill.addColorStop(1, \"rgba(173,215,255,0.4\");\r\n\r\n        const {data} = this.props;\r\n\r\n        if (typeof myBarChart !== \"undefined\") myBarChart.destroy();\r\n\r\n        myBarChart = new Chart(myChartRef, {\r\n            type: 'bar',\r\n            data: {\r\n                // Bring in data\r\n                //labels: ['a', 'b', 'c', 'd', 'e', 'f'],\r\n                // labels: labels\r\n                datasets: [\r\n                    {\r\n                        label: \"Count\",\r\n                        //data: [16, 46, 23, 72, 55, 78],\r\n                        data: data,\r\n                        fill: true,\r\n                        borderColor: gradientStroke,\r\n                        pointBorderColor: gradientStroke,\r\n                        pointBackgroundColor: gradientStroke,\r\n                        pointBorderWidth: 2,\r\n                        pointHoverRadius: 2,\r\n                        pointRadius: 2,\r\n                        backgroundColor: gradientFill,\r\n                        //hoverBackgroundColor:\r\n                        hoverBorderColor: \"#FACD83\",\r\n                        borderWidth: 2.5,\r\n                    }\r\n                ]\r\n            },\r\n            options: {\r\n                //Customize chart options\r\n                legend: {\r\n                    position: \"bottom\"\r\n                },\r\n                tooltips: {\r\n                    mode: 'index',\r\n                    intersect: false,\r\n                },\r\n                hover: {\r\n                    mode: 'nearest',\r\n                    intersect: false,\r\n                    animationDuration: 0\r\n                },\r\n                scales: {\r\n                    xAxes: [{\r\n                        //barThickness: 30,\r\n                        type: 'time',\r\n                        time: {\r\n                            padding: 15,\r\n                            fontStyle: \"bold\",\r\n                            parser: 'YY-MM-DD HH:mm:ss',\r\n                            unit: 'minute',\r\n                            unitStepSize: 15,\r\n                            displayFormat: {\r\n                                hour: 'MM-DD HH:mm'\r\n                            }\r\n                        },\r\n                        ticks: {\r\n                            autoSkip: true,\r\n                            source: 'auto'\r\n                        }\r\n                    }],\r\n                    // yAxes: [{\r\n                    //     scaleLabel: {\r\n                    //         //display: true,\r\n                    //         //labelString: 'Work Count'\r\n                    //     },\r\n                    //     ticks: {\r\n                    //         fontColor: \"rgba(0,0,0,0.8)\",\r\n                    //         fontStyle: \"bold\",\r\n                    //         maxTicksLimit: 5,\r\n                    //         padding: 15,\r\n                    //         beginAtZero: true,\r\n                    //         stepValue: 5,\r\n                    //         steps: 10\r\n                    //     }\r\n                    // }],\r\n                    tooltips: {\r\n                        intersect: false,\r\n                        mode: 'index',\r\n                        callbacks: {\r\n                            label: function (tooltipItem, myData) {\r\n                                var label = myData.datasets[tooltipItem.datasetIndex].label || '';\r\n                                if (label) {\r\n                                    label += ': ';\r\n                                }\r\n                                label += parseFloat(tooltipItem.value).toFixed(2);\r\n                                return label;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        })\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"chart_section\">\r\n                <h3>WorK Count [CNT]</h3>\r\n                <div className=\"chart_cnt\">\r\n                    <canvas id=\"myCountChart\" ref={this.chartRef}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}