{"ast":null,"code":"import _classCallCheck from\"C:\\\\Users\\\\Administrator\\\\Documents\\\\React\\\\indycare\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\Administrator\\\\Documents\\\\React\\\\indycare\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"C:\\\\Users\\\\Administrator\\\\Documents\\\\React\\\\indycare\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"C:\\\\Users\\\\Administrator\\\\Documents\\\\React\\\\indycare\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";import _inherits from\"C:\\\\Users\\\\Administrator\\\\Documents\\\\React\\\\indycare\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import React from'react';import Axios from\"axios\";import busyIcon from\"../../resources/Robot/active/icon_busy.svg\";import readyIcon from\"../../resources/Robot/active/icon_ready.svg\";import collisionIcon from\"../../resources/Robot/active/icon_collision.svg\";import errorIcon from\"../../resources/Robot/active/icon_error.svg\";import statePlayIcon from\"../../resources/Robot/active/icon_state_play.svg\";import statePauseIcon from\"../../resources/Robot/active/icon_state_pause.svg\";import emergencyIcon from\"../../resources/Robot/active/icon_energency.svg\";import reporterConnectIcon from\"../../resources/Robot/active/icon_report_connected.svg\";import serverConnectIcon from\"../../resources/Robot/active/icon_server_connected.svg\";import unbusyIcon from\"../../resources/Robot/inactive/icon_busy.svg\";import unreadyIcon from\"../../resources/Robot/inactive/icon_ready.svg\";import uncollisionIcon from\"../../resources/Robot/inactive/icon_collision.svg\";import unerrorIcon from\"../../resources/Robot/inactive/icon_error.svg\";import unstateStopIcon from\"../../resources/Robot/inactive/icon_state_stop.svg\";import unemergencyIcon from\"../../resources/Robot/inactive/icon_energency.svg\";import reporterNotConnectIcon from\"../../resources/Robot/inactive/icon_report_connected.svg\";import serverNotConnectIcon from\"../../resources/Robot/inactive/icon_server_connected.svg\";import{ImgOnly}from\"../Public/Image\";function StateDiv(props){//console.log(props.state.data);\nvar state=props.state.data;if(state===undefined)state={};var rows=[];//console.log(state);\n// 0 ~ 9\nfor(var key in state){var imgElement=void 0;//console.log(key, state[key]);\nif(state.hasOwnProperty(key)){if(state[key]>0){if(key==='busy')imgElement=React.createElement(ImgOnly,{src:busyIcon,text:'BUSY'});else if(key==='ready')imgElement=React.createElement(ImgOnly,{src:readyIcon,text:'READY'});else if(key==='collision')imgElement=React.createElement(ImgOnly,{src:collisionIcon,text:'COLLISION'});else if(key==='error')imgElement=React.createElement(ImgOnly,{src:errorIcon,text:'ERROR'});else if(state[key]===2)imgElement=React.createElement(ImgOnly,{src:statePauseIcon,text:'PROGRAM STATE'});else if(key==='program_state')imgElement=React.createElement(ImgOnly,{src:statePlayIcon,text:'PROGRAM STATE'});else if(key==='emergency')imgElement=React.createElement(ImgOnly,{src:emergencyIcon,text:'EMERGENCY'});else if(key==='is_reporter_running')imgElement=React.createElement(ImgOnly,{src:reporterConnectIcon,text:'ROBOT CONNECTED'});else if(key==='is_server_connected')imgElement=React.createElement(ImgOnly,{src:serverConnectIcon,text:'SERVER CONNECTED'});rows.push(React.createElement(\"li\",{id:key+'_li',key:key},imgElement));}else{if(key==='busy')imgElement=React.createElement(ImgOnly,{src:unbusyIcon,text:'BUSY'});else if(key==='ready')imgElement=React.createElement(ImgOnly,{src:unreadyIcon,text:'READY'});else if(key==='collision')imgElement=React.createElement(ImgOnly,{src:uncollisionIcon,text:'COLLISION'});else if(key==='error')imgElement=React.createElement(ImgOnly,{src:unerrorIcon,text:'ERROR'});else if(key==='program_state')imgElement=React.createElement(ImgOnly,{src:unstateStopIcon,text:'PROGRAM STATE'});else if(key==='emergency')imgElement=React.createElement(ImgOnly,{src:unemergencyIcon,text:'EMERGENCY'});else if(key==='is_reporter_running')imgElement=React.createElement(ImgOnly,{src:reporterNotConnectIcon,text:'ROBOT CONNECTED'});else if(key==='is_server_connected')imgElement=React.createElement(ImgOnly,{src:serverNotConnectIcon,text:'SERVER CONNECTED'});rows.push(React.createElement(\"li\",{id:key+'_li',key:key},imgElement));}}else alert(\"Error입니다\");}return React.createElement(\"div\",{className:\"robot_state_noti\"},React.createElement(\"ul\",{id:\"stateUI\"},rows));}var StateView=/*#__PURE__*/function(_React$Component){_inherits(StateView,_React$Component);function StateView(props){var _this;_classCallCheck(this,StateView);_this=_possibleConstructorReturn(this,_getPrototypeOf(StateView).call(this,props));_this.state={robotState:{'busy':0,'collision':0,'emergency':0,'error':0,'home':0,'finish':0,'ready':0,'resetting':0,'zero':0,'is_server_connected':0}};return _this;}_createClass(StateView,[{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;this.stateID=setInterval(function(){return _this2.tick();},1000);}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){clearInterval(this.stateID);}},{key:\"tick\",value:function tick(){var _this3=this;Axios.get('http://localhost:4000/robot/state/'+this.props.sn).then(function(res){//console.log(res);\n_this3.setState({robotState:res});}).catch(function(err){alert(err);});}},{key:\"render\",value:function render(){return React.createElement(\"div\",{className:\"robot_state\"},React.createElement(\"div\",{className:\"robot_state_info\"},React.createElement(\"h3\",null,\"Robot State\"),React.createElement(StateDiv,{state:this.state.robotState})));}}]);return StateView;}(React.Component);export default StateView;","map":{"version":3,"sources":["C:/Users/Administrator/Documents/React/indycare/src/components/Robot/State.js"],"names":["React","Axios","ImgOnly","StateDiv","props","state","data","undefined","rows","key","imgElement","hasOwnProperty","busyIcon","readyIcon","collisionIcon","errorIcon","statePauseIcon","statePlayIcon","emergencyIcon","reporterConnectIcon","serverConnectIcon","push","unbusyIcon","unreadyIcon","uncollisionIcon","unerrorIcon","unstateStopIcon","unemergencyIcon","reporterNotConnectIcon","serverNotConnectIcon","alert","StateView","robotState","stateID","setInterval","tick","clearInterval","get","sn","then","res","setState","catch","err","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Axios from \"axios\";\r\nimport busyIcon from '../../resources/Robot/active/icon_busy.svg';\r\nimport readyIcon from '../../resources/Robot/active/icon_ready.svg';\r\nimport collisionIcon from '../../resources/Robot/active/icon_collision.svg';\r\nimport errorIcon from '../../resources/Robot/active/icon_error.svg';\r\nimport statePlayIcon from '../../resources/Robot/active/icon_state_play.svg';\r\nimport statePauseIcon from '../../resources/Robot/active/icon_state_pause.svg';\r\nimport emergencyIcon from '../../resources/Robot/active/icon_energency.svg';\r\nimport reporterConnectIcon from '../../resources/Robot/active/icon_report_connected.svg';\r\nimport serverConnectIcon from '../../resources/Robot/active/icon_server_connected.svg';\r\nimport unbusyIcon from '../../resources/Robot/inactive/icon_busy.svg';\r\nimport unreadyIcon from '../../resources/Robot/inactive/icon_ready.svg';\r\nimport uncollisionIcon from '../../resources/Robot/inactive/icon_collision.svg';\r\nimport unerrorIcon from '../../resources/Robot/inactive/icon_error.svg';\r\nimport unstateStopIcon from '../../resources/Robot/inactive/icon_state_stop.svg';\r\nimport unemergencyIcon from '../../resources/Robot/inactive/icon_energency.svg';\r\nimport reporterNotConnectIcon from '../../resources/Robot/inactive/icon_report_connected.svg';\r\nimport serverNotConnectIcon from '../../resources/Robot/inactive/icon_server_connected.svg';\r\nimport {ImgOnly} from \"../Public/Image\";\r\n\r\nfunction StateDiv(props) {\r\n    //console.log(props.state.data);\r\n    let state = props.state.data;\r\n    if (state === undefined)\r\n        state = {};\r\n\r\n    let rows = [];\r\n\r\n    //console.log(state);\r\n    // 0 ~ 9\r\n    for (let key in state) {\r\n        let imgElement;\r\n        //console.log(key, state[key]);\r\n        if (state.hasOwnProperty(key)) {\r\n            if (state[key] > 0) {\r\n                if (key === 'busy')\r\n                    imgElement = <ImgOnly src={busyIcon} text={'BUSY'}/>;\r\n                else if (key === 'ready')\r\n                    imgElement = <ImgOnly src={readyIcon} text={'READY'}/>;\r\n                else if (key === 'collision')\r\n                    imgElement = <ImgOnly src={collisionIcon} text={'COLLISION'}/>;\r\n                else if (key === 'error')\r\n                    imgElement = <ImgOnly src={errorIcon} text={'ERROR'}/>;\r\n                else if (state[key] === 2)\r\n                    imgElement = <ImgOnly src={statePauseIcon} text={'PROGRAM STATE'}/>;\r\n                else if (key === 'program_state')\r\n                    imgElement = <ImgOnly src={statePlayIcon} text={'PROGRAM STATE'}/>;\r\n                else if (key === 'emergency')\r\n                    imgElement = <ImgOnly src={emergencyIcon} text={'EMERGENCY'}/>;\r\n                else if (key === 'is_reporter_running')\r\n                    imgElement = <ImgOnly src={reporterConnectIcon} text={'ROBOT CONNECTED'}/>;\r\n                else if (key === 'is_server_connected')\r\n                    imgElement = <ImgOnly src={serverConnectIcon} text={'SERVER CONNECTED'}/>;\r\n\r\n                rows.push(<li id={key + '_li'} key={key}>{imgElement}</li>);\r\n            } else {\r\n                if (key === 'busy')\r\n                    imgElement = <ImgOnly src={unbusyIcon} text={'BUSY'}/>;\r\n                else if (key === 'ready')\r\n                    imgElement = <ImgOnly src={unreadyIcon} text={'READY'}/>;\r\n                else if (key === 'collision')\r\n                    imgElement = <ImgOnly src={uncollisionIcon} text={'COLLISION'}/>;\r\n                else if (key === 'error')\r\n                    imgElement = <ImgOnly src={unerrorIcon} text={'ERROR'}/>;\r\n                else if (key === 'program_state')\r\n                    imgElement = <ImgOnly src={unstateStopIcon} text={'PROGRAM STATE'}/>;\r\n                else if (key === 'emergency')\r\n                    imgElement = <ImgOnly src={unemergencyIcon} text={'EMERGENCY'}/>;\r\n                else if (key === 'is_reporter_running')\r\n                    imgElement = <ImgOnly src={reporterNotConnectIcon} text={'ROBOT CONNECTED'}/>;\r\n                else if (key === 'is_server_connected')\r\n                    imgElement = <ImgOnly src={serverNotConnectIcon} text={'SERVER CONNECTED'}/>;\r\n\r\n                rows.push(<li id={key + '_li'} key={key}>{imgElement}</li>);\r\n            }\r\n        } else\r\n            alert(\"Error입니다\");\r\n    }\r\n\r\n    return (\r\n        <div className=\"robot_state_noti\">\r\n            <ul id=\"stateUI\">\r\n                {rows}\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nclass StateView extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            robotState: {\r\n                'busy': 0, 'collision': 0, 'emergency': 0, 'error': 0, 'home': 0,\r\n                'finish': 0, 'ready': 0, 'resetting': 0, 'zero': 0, 'is_server_connected': 0\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.stateID = setInterval(\r\n            () => this.tick(), 1000\r\n        );\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.stateID)\r\n    }\r\n\r\n    tick() {\r\n        Axios.get('http://localhost:4000/robot/state/' + this.props.sn)\r\n            .then(res => {\r\n                    //console.log(res);\r\n                    this.setState({robotState: res});\r\n                }\r\n            )\r\n            .catch(err => {\r\n                    alert(err);\r\n                }\r\n            )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"robot_state\">\r\n                <div className=\"robot_state_info\">\r\n                    <h3>Robot State</h3>\r\n                    <StateDiv state={this.state.robotState}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default StateView;\r\n\r\n"]},"metadata":{},"sourceType":"module"}